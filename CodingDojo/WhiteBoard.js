// 2. Given an array, move all values forward by one index, dropping the first and leaving a ‘0’ value at the end.  For example moveForward( [1,2,3]) should return [2,3,0].

const moveForward = (arr) => {
  for (let i = 0; i < arr.length - 1; i++) {
    arr[i] = arr[i + 1];
  }
  arr[arr.length - 1] = 0;
  return arr;
};

// console.log(moveForward([1, 2, 3]));

const returnReversed = (arr) => {
  let end = arr.length - 1;
  for (let i = 0; i < arr.length / 2; i++) {
    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];
  }
  return arr;
};

// console.log(returnReversed([1, 2, 3]));

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.

const sumMultiples = (n) => {
  let sum = 0;
  for (let i = 1; i < 1000; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      sum += i;
    }
  }
  return sum;
};

// console.log(sumMultiples(1000));

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

const sumEvenFib = (n) => {
  let n1 = 0,
    n2 = 1,
    nextTerm;
  let fibArray = [];
  nextTerm = n1 + n2;
  let sum = 0;

  while (nextTerm <= n) {
    fibArray.push(nextTerm);
    if (nextTerm % 2 === 0) {
      sum += nextTerm;
    }
    n1 = n2;
    n2 = nextTerm;
    nextTerm = n1 + n2;
  }
  return sum;
};

console.log(sumEvenFib(4000000));

function minimalHeaviestSetA(arr) {
  const result = (sArr) => {
    console.log(sArr);
    let A = [];
    let B = [];
    let sumA = sArr[sArr.length - 1];
    let sumB = 0;
    let x = sArr.length - 1;
    console.log(x);
    for (let y = 0; y <= x - 1; y++) {
      sumB += sArr[y];
      if (sumB >= sumA) {
        A.push(sArr[x - 1]);
        sumA += arr[x - 1];
        x--;
        console.log(x);
      }
    }
    A.sort((a, b) => a - b);
    return A;
  };
  const sorted = arr.sort((a, b) => a - b);
  console.log(sorted);
  return result(sorted);
}

console.log(minimalHeaviestSetA([6, 5, 3, 2, 4, 1, 2]));
