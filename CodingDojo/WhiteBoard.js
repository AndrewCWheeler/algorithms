// 2. Given an array, move all values forward by one index, dropping the first and leaving a ‘0’ value at the end.  For example moveForward( [1,2,3]) should return [2,3,0].

const moveForward = (arr) => {
  for (let i = 0; i < arr.length - 1; i++) {
    arr[i] = arr[i + 1];
  }
  arr[arr.length - 1] = 0;
  return arr;
};

console.log(moveForward([1, 2, 3]));

const returnReversed = (arr) => {
  for (let i = 0, j = arr.length - 1; i < arr.length / 2; i++) {
    // [arr[i], arr[j]] = [arr[j], arr[i]];
    let t = arr[i];
    arr[i] = arr[j];
    arr[j] = t;
    j--;
  }
  return arr;
};

console.log(returnReversed([1, 2, 3]));

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.

const sumMultiples = (n) => {
  let sum = 0;
  for (let i = 1; i < 1000; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      sum += i;
    }
  }
  return sum;
};

// console.log(sumMultiples(1000));

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

const sumEvenFib = (n) => {
  let n1 = 0,
    n2 = 1,
    next;
  // let arr = [];
  let sum = 0;
  next = n1 + n2;
  while (next <= n) {
    // arr.push(next);
    if (next % 2 === 0) {
      sum += next;
    }
    n1 = n2;
    n2 = next;
    next = n1 + n2;
  }
  return sum;
};

console.log(sumEvenFib(4000000));

const generateFibonacci = (n) => {
  let n1 = 0,
    n2 = 1,
    next;
  let arr = [];
  next = n1 + n2;
  while (next <= n) {
    arr.push(next);
    n1 = n2;
    n2 = next;
    next = n1 + n2;
  }
  return arr;
};
console.log(generateFibonacci(4000000));

function minimalHeaviestSetA(arr) {
  const result = (sArr) => {
    console.log(sArr);
    let A = [];
    let B = [];
    let sumA = sArr[sArr.length - 1];
    let sumB = 0;
    let x = sArr.length - 1;
    console.log(x);
    for (let y = 0; y <= x - 1; y++) {
      sumB += sArr[y];
      if (sumB >= sumA) {
        A.push(sArr[x - 1]);
        sumA += arr[x - 1];
        x--;
        console.log(x);
      }
    }
    A.sort((a, b) => a - b);
    return A;
  };
  const sorted = arr.sort((a, b) => a - b);
  console.log(sorted);
  return result(sorted);
}

// console.log(minimalHeaviestSetA([6, 5, 3, 2, 4, 1, 2]));

// 1. Write a function that returns an array with all the numbers from 1 to 255.
const getArr = () => {
  let result = [];
  for (let i = 1; i <= 255; i++) {
    result.push(i);
  }
  return result;
};
// console.log(getArr());
// 43s (with errors)

// 2. Write a function that would get the sum of all the even numbers from 1 to 1000. You may use a modulus operator for this exercise.
const sumEvens = (start, end) => {
  let sum = 0;
  for (let i = start; i <= end; i++) {
    if (i % 2 === 0) {
      sum += i;
    }
  }
  return sum;
};
console.log(sumEvens(1, 1000));
// 1:09 (with errors)

// 3. Write a function that returns the sum of all the odd numbers from 1 to 5000. (e.g. 1+3+5+...+4997+4999)
const sumOdds = (start, end) => {
  let sum = 0;
  for (let i = start; i <= end; i++) {
    if (i % 2 !== 0) {
      sum += i;
    }
  }
  return sum;
};
console.log(sumOdds(1, 5000));
// 48s

// 4. Write a function that returns the sum of all the values within an array. (e.g. [1,2,5] returns 8, [-5,2,5,12] returns 14)
const sumVals = (arr) => {
  let sum = arr[0];
  for (let i = 1; i <= arr.length - 1; i++) {
    sum += arr[i];
  }
  return sum;
};
console.log(sumVals([2, 4, 5, 6]));
// 55s

// 5. Given an array with multiple values, write a function that returns the maximum number in the array. (e.g. for [-3,3,5,7] max is 7)

const maxNum = (arr) => {
  let max = arr[0];
  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
};
console.log(maxNum([-2, 3, 6, 3, 1]));
// 50s

// console.log(maxNum);

// 6. Given an array with multiple values, write a function that returns the average of the values in the array. (e.g. for [1,3,5,7,20] average is 7.2)
const avg = (arr) => {
  let avg;
  let sum = arr[0];
  for (let i = 1; i < arr.length; i++) {
    sum += arr[i];
  }
  avg = sum / arr.length;
  return avg;
};
console.log(avg([1, 3, 5, 7, 20]));
// 1:40

// 7. Write a function that would return an array of all the odd numbers between 1 to 50. (ex. [1,3,5, .... , 47,49]). Hint: Use 'push' method.
const getOdds = (start, end) => {
  let odds = [];
  for (let i = start; i <= end; i++) {
    if (i % 2 !== 0) {
      odds.push(i);
    }
  }
  return odds;
};
console.log(getOdds(1, 50));
// 1:10s

// 8. Given value of Y, write a function that takes an array and returns the number of values that are greater than Y. For example if arr = [1, 3, 5, 7] and Y = 3, your function will return 2. (There are two values in the array greater than 3, which are 5, 7).
const Y = 3;
const greaterThanY = (arr) => {
  let count = 0;
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > Y) {
      count++;
    }
  }
  return count;
};
console.log(greaterThanY([1, 3, 5, 7]));
// 45s

// 9. Given an array with multiple values, write a function that replaces each value in the array with the product of the original value multiplied by itself. (e.g. [1,5,10,-2] will become [1,25,100,4])
const valSquared = (arr) => {
  for (let i = 0; i < arr.length; i++) {
    arr[i] = arr[i] * arr[i];
  }
  return arr;
};
console.log(valSquared([1, 5, 10, -2]));
// 58s

// 10. Given an array with multiple values, write a function that replaces any negative numbers within the array with the value of 0. When the program is done the array should contain no negative values. (e.g. [1,5,10,-2] will become [1,5,10,0])
const noNegatives = (arr) => {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < 0) {
      arr[i] = 0;
    }
  }
  return arr;
};
console.log(noNegatives([1, 5, 10, -2, 1, -5]));
// 45s

// 11. Given an array with multiple values, write a function that returns a new array that only contains the maximum, minimum, and average values of the original array. (e.g. [1,5,10,-2] will return [10,-2,3.5])
const maxMinAvg = (arr) => {
  let result = [];
  let max = arr[0];
  let min = arr[0];
  let sum = 0;
  let avg;
  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
    if (arr[i] < min) {
      min = arr[i];
    }
    sum += arr[i];
  }
  avg = sum / arr.length;
  result.push(max, min, avg);
  return result;
};
console.log(maxMinAvg([1, 5, 10, -2, -5, 4]));
// 2:20

// 12. Write a function that will swap the first and last values of any given array. The default minimum length of the array is 2. (e.g. [1,5,10,-2] will become [-2,5,10,1]).
const swapFirstLast = (arr) => {
  [arr[0], arr[arr.length - 1]] = [arr[arr.length - 1], arr[0]];
  return arr;
};
console.log(swapFirstLast([1, 5, 10, -2]));
// 46s

// 13. Write a function that takes an array of numbers and replaces any negative values within the array with the string 'Dojo'. For example if array = [-1,-3,2], your function will return ['Dojo','Dojo',2].
const dojoReplace = (arr) => {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < 0) {
      arr[i] = 'Dojo';
    }
  }
  return arr;
};
console.log(dojoReplace([-1, -3, 2]));
// 39s
